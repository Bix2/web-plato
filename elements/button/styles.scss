// --------------------------------------------------------- button styles

$button-color-primary: $primary-color !default;
$button-color-primary-contrast: $primary-contrast !default;
$button-color-secondary: $secondary-color !default;
$button-color-secondary-contrast: $secondary-contrast !default;
$button-color-danger: $danger-color !default;
$button-color-danger-contrast: $danger-contrast !default;
$button-color-success: $success-color !default;
$button-color-success-contrast: $success-contrast !default;
$button-color-warning: $warning-color !default;
$button-color-warning-contrast: $warning-contrast !default;

// TODO : a-button colors

$button-color-map: (
	primary: (
		color: $button-color-primary,
		contrast: $button-color-primary-contrast
	),
	secondary: (
		color: $button-color-secondary,
		contrast: $button-color-secondary-contrast
	),
	danger: (
		color: $button-color-danger,
		contrast: $button-color-danger-contrast
	),
	success: (
		color: $button-color-success,
		contrast: $button-color-success-contrast
	),
	warning: (
		color: $button-color-warning,
		contrast: $button-color-warning-contrast
	)
);

@function button-color-map-get-color($color, $variant) {
	@if map-has-key($map: $button-color-map, $key: $color) {
		$color-map: map-get($map: $button-color-map, $key: $color);
		@if map-has-key($map: $color-map, $key: $variant) {
			$color-variant: map-get($map: $color-map, $key: $variant);
			@return $color-variant;
		}
		@else {
			@warn "Requested variant '#{$variant}' is not available for color '#{$color}'.";
			@return null;
		}
	}
	@else {
		@warn "Requested color '#{$color}' is not available.";
		@return null;
	}
}

@mixin button-generator($color: "primary", $style: "regular", $size: "normal", $options: ("round": false, "square": false, "full": false)) {
	$color-color: button-color-map-get-color($color, "color");
	$color-contrast: button-color-map-get-color($color, "contrast");
	color: $color-contrast;
	@include button-background($color-color);
	@include button-base;
	@if $style == "outline" {
		@include button-outline($color-color);
	}
	@else if $style == "ghost" {
		@include button-ghost($color-color);
	}
	@else if $style == "regular" {
		// do nothing
	}
	@else if $style != null {
		@warn "The requested style '#{$style}' is not available.";
	}
}

button, .button, %button {
	&.primary {
		@include button-generator($color: "primary");
	}
	&.primary.outline {
		@include button-generator($color: "primary", $style: "outline");
	}
	&.primary.ghost {
		@include button-generator($color: "primary", $style: "ghost");
	}
	&.secondary {
		@include button-generator($color: "secondary");
	}
	&.secondary.outline {
		@include button-generator($color: "secondary", $style: "outline");
	}
	&.secondary.ghost {
		@include button-generator($color: "secondary", $style: "ghost");
	}
	&.danger {
		@include button-generator($color: "danger");
	}
	&.danger.outline {
		@include button-generator($color: "danger", $style: "outline");
	}
	&.danger.ghost {
		@include button-generator($color: "danger", $style: "ghost");
	}
	&.success {
		@include button-generator($color: "success");
	}
	&.success.outline {
		@include button-generator($color: "success", $style: "outline");
	}
	&.success.ghost {
		@include button-generator($color: "success", $style: "ghost");
	}
	&.warning {
		@include button-generator($color: "warning");
	}
	&.warning.outline {
		@include button-generator($color: "warning", $style: "outline");
	}
	&.warning.ghost {
		@include button-generator($color: "warning", $style: "ghost");
	}
}

.button, %button {
	@include button-base;
	// an icon is assumed on the left
	.icon, .fa {
		margin-right: 0.5rem;
	}
	&.has-icon-right {
		.icon, .fa {
			margin-left: 0.5rem;
		}
	}
	&.has-icon, &.has-icon-left {
		.icon, .fa {
			margin-right: 0.5rem;
		}
	}
}

a.button, %a-button {
	@include button-ghost($neutral-color);
	@include button-base;
	line-height: $button-height;
	text-transform: inherit;
	&.primary {
		@include button-ghost($primary-color);
	}
	&:hover {
		background-color: transparent;
	}
}